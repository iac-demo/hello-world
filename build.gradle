buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE"
        classpath "com.roku:henka:1.0.0-RELEASE"

    }
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '4.4.1'
    id "com.patdouble.awsecr" version "0.5.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'hello-world'
    version =  ''
}

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("junit:junit")
}

docker {
    registryCredentials {
        url = "https://${System.getenv().get('TF_VAR_aws_account_id')}.dkr.ecr.${System.getenv().get('TF_VAR_aws_region') ?: 'us-west-2'}.amazonaws.com"
    }
}

// Import task types
import com.bmuschko.gradle.docker.tasks.image.*
import com.roku.henka.TerraformTask

// Use task types
task dockerBuild(type: DockerBuildImage) {
    doFirst{
        checkEnvVars()
    }
    inputDir = file('./')

    tags.add("${System.getenv().get('TF_VAR_aws_account_id')}.dkr.ecr.${System.getenv().get('TF_VAR_aws_region') ?: 'us-west-2'}.amazonaws.com/helloworld:latest")
}

task dockerPush(type: DockerPushImage) {
    doFirst{
        checkEnvVars()
    }
    imageName = "${System.getenv().get('TF_VAR_aws_account_id')}.dkr.ecr.${System.getenv().get('TF_VAR_aws_region') ?: 'us-west-2'}.amazonaws.com/helloworld:latest"
}


task terraform(type: TerraformTask) {
    doFirst{
        checkEnvVars()
    }
    description "Runs a terraform script"
    tfDir       = "${projectDir}/terraform"
    tfAction    = project.hasProperty("tfAction") ? project.property('tfAction') : "plan -input=false"
    tfInitParams = "-input=false -backend-config=bucket=${System.getenv().get('TF_VAR_s3_state_bucket')}"

    terraformBaseDir = "/opt/terraform"
    terraformVersion = "0.12.9"
}


task modularTerraform(type: TerraformTask) {
    doFirst{
        checkEnvVars()
    }
    description "Runs a terraform script"
    tfDir       = "${projectDir}/modular_terraform"
    tfAction    = project.hasProperty("tfAction") ? project.property('tfAction') : "plan -input=false"
    tfInitParams = "-input=false -backend-config=bucket=${System.getenv().get('TF_VAR_s3_state_bucket')}"

    terraformBaseDir = "/opt/terraform"
    terraformVersion = "0.12.9"
}

private void checkEnvVars() {
    if (!System.getenv().containsKey("TF_VAR_aws_region")) {
        throw new GradleException("Please set TF_VAR_aws_region env var before continuing.")
    }
    if (!System.getenv().containsKey("TF_VAR_aws_account_id")) {
        throw new GradleException("Please set TF_VAR_aws_account_id env var before continuing.")
    }
    if (!System.getenv().containsKey("TF_VAR_s3_state_bucket")) {
        throw new GradleException("Please set TF_VAR_s3_state_bucket env var before continuing.")
    }
}

